contract MyAuction =

  record product = 
    { creatorAddress : address,
      url            : string,
      nameofProduct  : string,
      currentPrice   : int,
      sold           : bool }

  record state = 
    { products : map(int, product),
      productLength : int,
      bidders : map(int,address),
      bidderLength : int }
    
  entrypoint init() = 
    { products = {}, 
      productLength = 0,
      bidders = {},
      bidderLength = 0 }
  
  entrypoint getProduct(index:int) : product = 
    switch(Map.lookup(index, state.products))
      None => abort("Product does not exist with this index")
      Some(x) => x  
    
  stateful entrypoint registerProduct(url' : string, nameofProduct': string, currentPrice': int) =
    let product = { creatorAddress = Call.caller, url = url', nameofProduct = nameofProduct', currentPrice = currentPrice', sold = false}  
    let index = getProductLength() + 1 
    put(state{products[index] = product, productLength  = index})
    

  entrypoint getProductLength() : int = 
    state.productLength
  
  
  
  //bid functionality
  
  stateful entrypoint bid(index: int) =
    let product = getProduct(index)
    let addresses = Call.caller
    let updatedBid = Call.value
    if(product.sold == true)
      abort("product has been sold")
    
    if(Call.value > product.currentPrice)
      Chain.spend(product.creatorAddress, Call.value)
    elif(Call.value < updatedBid)
      abort("your bid is lower than the current bid")
    else
      abort("you need to enter a value higher than 0 ")
    let updatedProduct = state.products{ [index].currentPrice = updatedBid}
    let index = getBidderLength() + 1
    
    
    put(state { products = updatedProduct})
      
    put(state{bidderLength = index})
    put(state{bidders[index]= addresses})
    
  //length of registered bidders
  entrypoint getBidderLength() : int = 
    state.bidderLength   
    
    
  //stores address of registered bidsers
  
  entrypoint getBidderAddress(index:int) = 
    switch(Map.lookup(index, state.bidders))
      None => abort("bidder does not exist with this index")
      Some(x) => x 
  
 // stateful entrypoint bidders(name:string)  = 
   // let bidder = { bidderAddress = Call.caller, updatedPrice = Call.value, name = name }
    //let index = getBidderLength() + 1
    //put(state{bidders[index] = bidders, bidderLength  = index})
    //put(state{bidders[index] = bidders, bidders  = bidder})
    
  stateful entrypoint closeBid(index : int) = 
    put(state{products[index].sold = true})
    
  

  