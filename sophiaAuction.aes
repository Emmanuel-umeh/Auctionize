contract MyAuction =

  record product = 
    { creatorAddress : address,
      url            : string,
      nameofProduct  : string,
      currentPrice   : int,
      description  : string,
      sold           : bool,
      reviews        : int}

  record state = 
    { products : map(int, product),
      productLength : int,
      bidders : map(int,address),
      bidderLength : int }

  entrypoint init() = 
    { products = {}, 
      productLength = 0,
      bidders = {},
      bidderLength = 0 }

  entrypoint getProduct(index:int) : product = 
    switch(Map.lookup(index, state.products))
      None => abort("Product does not exist with this index")
      Some(x) => x  

  stateful entrypoint registerProduct(url' : string, nameofProduct': string, description' : string, currentPrice': int) =
    let product = { creatorAddress = Call.caller, url = url', nameofProduct = nameofProduct', currentPrice = currentPrice', description = description', sold = false, reviews = state.bidderLength}  
    let index = getProductLength() + 1 
    put(state{products[index] = product, productLength  = index})


  entrypoint getProductLength() : int = 
    state.productLength



  //bid functionality

  payable stateful entrypoint bid(index: int) =
    let product = getProduct(index)
    let addresses = Call.caller
    let updatedBid = Call.value
    let contractBalance = getContractBalance()
    put(state{bidders[index]= addresses})
    
    biddingSecurity()

    


    if(product.sold == true)
      abort("product has been sold")
      
    //first bid
    //if(Call.value > product.currentPrice &&  contractBalance == 0)
      //Chain.spend(Contract.address, Call.value)
    
    
      //second bid
    //if(Call.value > product.currentPrice && contractBalance != 0)
      //let previousbidder = getBidderAddress(index)
      //Chain.spend(previousbidder,Contract.balance)
  
    //elif(Call.value < updatedBid)
      //abort("your bid is lower than the current bid")
    //else
      //abort("you need to enter a value higher than 0 ")
    let updatedProduct = state.products{ [index].currentPrice = updatedBid}
    let index = getBidderLength() + 1


    put(state { products = updatedProduct})
    
    put(state{bidderLength = index})


  //length of registered bidders
  entrypoint getBidderLength() : int = 
    state.bidderLength   


  //stores address of registered bidsers

  entrypoint getBidderAddress(index:int) = 
    switch(Map.lookup(index, state.bidders))
      None => abort("bidder does not exist with this index")
      Some(x) => x 

  // stateful entrypoint bidders(name:string)  = 
  // let bidder = { bidderAddress = Call.caller, updatedPrice = Call.value, name = name }
  //let index = getBidderLength() + 1
  //put(state{bidders[index] = bidders, bidderLength  = index})
  //put(state{bidders[index] = bidders, bidders  = bidder})

  stateful entrypoint closeBid(index : int) = 
    put(state{products[index].sold = true})
    let product = getProduct(index)
    let total = Contract.balance
    let creatorsAddress = product.creatorAddress
    Chain.spend(creatorsAddress: address, product.currentPrice: int)


  public entrypoint getContractBalance() : int =
    Contract.balance

  public entrypoint getContractowner() : address =
    Contract.creator

  stateful entrypoint biddingSecurity() = 
    if(Call.caller == Contract.creator)
      abort("you cannot bid on your own product")